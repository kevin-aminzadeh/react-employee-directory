{"version":3,"sources":["utils/API.js","components/Header/index.js","components/Table/SearchBar.js","utils/helpers.js","components/Table/TableHead.js","components/Table/TableRow.js","components/Table/TableBody.js","components/Table/index.js","App.js","reportWebVitals.js","index.js"],"names":["API","fetchUsers","a","page","results","axios","get","res","users","data","map","user","firstName","name","first","toLowerCase","lastName","last","gender","email","state","location","city","Header","className","SearchBar","setSearchTerm","useState","active","setActive","searchInputEl","useRef","id","type","placeholder","aria-label","ref","onFocus","onBlur","onChange","current","value","capitalizeString","string","replace","w","c","toUpperCase","TableHead","props","caretDown","setCaretDown","renderCaret","columnAccessor","sortColumn","columns","column","index","scope","onClick","accessor","handleSort","TableRow","renderText","text","searchTerm","keyword","regexPattern","RegExp","textArr","split","substr","style","fontWeight","highlightKeyword","Object","values","entry","TableBody","item","Table","tableData","setTableData","filteredData","setFilteredData","sorted","orderDesc","sortedBy","sortState","setSortState","useEffect","handleSearch","handleVisibleData","dataSet","searchBy","normalizedSearchTerm","filter","length","startsWith","keys","searchObjArr","searchableColumns","reverse","dataArray","property","order","sortedArr","sort","b","sortObjArr","renderTableName","App","employeesData","setEmployeesData","then","catch","err","console","log","filterableColumns","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42f76872.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API = {\n  fetchUsers: async function (page = 1, results = 50) {\n    const res = await axios.get(\n      `https://randomuser.me/api/?inc=id,name,gender,email,location&page=${page}&results=${results}&seed=foobar&nat=au`\n    );\n    const users = res.data.results;\n\n    return users.map((user) => {\n      return {\n        firstName: user.name.first.toLowerCase(),\n        lastName: user.name.last.toLowerCase(),\n        gender: user.gender.toLowerCase(),\n        email: user.email.toLowerCase(),\n        state: user.location.state.toLowerCase(),\n        city: user.location.city.toLowerCase(),\n      };\n    });\n  },\n};\n\nexport default API;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <div className=\"container-fluid\">\n          <span className=\"navbar-brand h4 text-uppercase pb-0\">\n            Employee Directory\n          </span>\n        </div>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useRef, useState } from \"react\";\n\nfunction SearchBar({ setSearchTerm }) {\n  // Initialize active state object\n  const [active, setActive] = useState(false);\n\n  // Initialize Element Refs\n  const searchInputEl = useRef(null);\n\n  return (\n    <div className=\"input-group w-80\" id=\"search-bar\">\n      <div className=\"input-group-text bg-white ps-4 rounded-0 border-0 d-lg-flex\">\n        <i\n          className={`fa fa-search fa-lg ${\n            active ? \"text-primary\" : \"text-muted\"\n          }`}\n        ></i>\n      </div>\n\n      <input\n        id=\"search-input\"\n        type=\"text\"\n        className=\"form-control form-control-dark border-0 rounded-0\"\n        placeholder=\"Search Employees\"\n        aria-label=\"Search\"\n        ref={searchInputEl}\n        onFocus={() => setActive(true)}\n        onBlur={() => setActive(false)}\n        onChange={() => {\n          setSearchTerm(searchInputEl.current.value);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","// Sort an array of objects by given property key and order\nexport const sortObjArr = (dataArray, { property, order }) => {\n  if (!dataArray.length) return;\n\n  // Create a new array to hold a sorted version of given data\n  let sortedArr = [...dataArray].sort((a, b) => {\n    return a[property] > b[property] ? 1 : b[property] > a[property] ? -1 : 0;\n  });\n\n  // If order is not \"desc\", return the sorted data array,\n  if (order !== \"desc\") return sortedArr;\n\n  // Otherwise create a reversed version of sorted data and return that instead (sorted in descending order)\n  const descSortedArr = [...sortedArr].reverse();\n\n  return descSortedArr;\n};\n\n// Filter dataset based on search term\nexport const searchObjArr = (searchTerm, dataSet, searchBy = []) => {\n  // Normalizer search input (convert searchTerm to lowercase)\n  const normalizedSearchTerm = searchTerm.toLowerCase();\n\n  return dataSet.filter((item) => {\n    // If specific properties to search by were provided,\n    if (searchBy.length) {\n      // Iterate through each given property,\n      for (const property of searchBy) {\n        // And if the value of that particular property on the current item starts with the search term, return true\n        if (item[property].startsWith(normalizedSearchTerm)) return true;\n      }\n    }\n\n    // If properties to search by were not given, get the name of the object's properties,\n    const itemProperties = Object.keys(item);\n    // And search for values that begin with the search term in every property\n    for (const property of itemProperties) {\n      if (item[property].startsWith(normalizedSearchTerm)) return true;\n    }\n    return false;\n  });\n};\n\n// Capitalize String\nexport const capitalizeString = (string) =>\n  string.replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n","import React, { useState } from \"react\";\nimport { capitalizeString } from \"../../utils/helpers\";\n\nfunction TableHead(props) {\n  // Initialize state object to keep track of caret direction\n  const [caretDown, setCaretDown] = useState(true);\n\n  const renderCaret = (columnAccessor) => {\n    // If the column being sorted by is different to the column invoking this function, don't render caret\n    if (!props.sortColumn || props.sortColumn !== columnAccessor) return;\n\n    return <i className={`fas fa-caret-${caretDown ? \"down\" : \"up\"} ms-2`}></i>;\n  };\n\n  const handleClick = (columnAccessor) => {\n    // If user clicks the same column, invert the value of caretDown (i.e Flip caret direction)\n    if (props.sortColumn === columnAccessor)\n      setCaretDown(caretDown ? false : true);\n\n    // If a different column is clicked and caretDown is falsy (i.e. Caret direction is up), change the direction to down (i.e. caretDown = true)\n    if (!caretDown) setCaretDown(true);\n\n    // Invoke handle sort function with the accessor name of the column being clicked\n    props.handleSort(columnAccessor);\n  };\n\n  return (\n    <thead>\n      <tr>\n        {props.columns.map((column, index) => (\n          <th scope=\"col\" key={index}>\n            <button\n              className=\"border-0 bg-transparent text-start px-0\"\n              onClick={() => handleClick(column.accessor)}\n            >\n              <span\n                className={`fw-bold text-${\n                  props.sortColumn === column.accessor ? \"dark\" : \"muted\"\n                }`}\n              >\n                {capitalizeString(column.name)}\n              </span>\n              {renderCaret(column.accessor)}\n            </button>\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nexport default TableHead;\n","import React from \"react\";\nimport { capitalizeString } from \"../../utils/helpers\";\n\nfunction TableRow(props) {\n  // Highlight Search Term in Search Results\n  const highlightKeyword = (text, keyword) => {\n    if (!keyword || !text) return;\n\n    // Create a RegEx pattern to match if text begins with keyword\n    const regexPattern = new RegExp(`^\\\\b(${keyword})`, \"gi\");\n\n    // Split text into subarrays where regexPattern matches\n    let textArr = text.split(regexPattern);\n\n    return (\n      <span>\n        {textArr.map((substr, index) => {\n          return (\n            // For Each Substring, if the Substring Matches the Keyword,\n            // Apply Additional Styles For Keyword Highlighting,\n            <span\n              key={index}\n              style={\n                substr.toLowerCase() === keyword.toLowerCase()\n                  ? { fontWeight: \"bold\" }\n                  : {}\n              }\n            >\n              {substr}\n            </span>\n          );\n        })}\n      </span>\n    );\n  };\n\n  // Handle text rendering logic\n  const renderText = (text) => {\n    if (!props.searchTerm) return text;\n\n    return highlightKeyword(text, props.searchTerm);\n  };\n\n  return (\n    <tr>\n      {Object.values(props.data).map((entry, index) => {\n        return <td key={index}>{renderText(capitalizeString(entry))}</td>;\n      })}\n    </tr>\n  );\n}\n\nexport default TableRow;\n","import React from \"react\";\nimport TableRow from \"./TableRow\";\n\nfunction TableBody(props) {\n  return (\n    <tbody>\n      {props.data.map((item, index) => (\n        <TableRow data={item} key={index} searchTerm={props.searchTerm} />\n      ))}\n    </tbody>\n  );\n}\n\nexport default TableBody;\n","import React, { useEffect, useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport TableHead from \"./TableHead\";\nimport TableBody from \"./TableBody\";\nimport { sortObjArr, searchObjArr } from \"../../utils/helpers\";\n\nfunction Table(props) {\n  // Initialize table data state object\n  const [tableData, setTableData] = useState([]);\n\n  // Initialize filtered data state object\n  const [filteredData, setFilteredData] = useState([]);\n\n  // Initialize sort state object\n  const [sortState, setSortState] = useState({\n    sorted: false,\n    orderDesc: false,\n    sortedBy: \"\",\n  });\n\n  // Initialize search state object\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Sync tableData state with data prop\n  useEffect(() => {\n    setTableData(props.data);\n  }, [props.data]);\n\n  // Call the handleSearch function every time the value of searchTerm is updated\n  useEffect(() => {\n    handleSearch(searchTerm);\n  }, [searchTerm]);\n\n  // If data is sorted during search, run the search function again to make sure displayed results are sorted correctly\n  useEffect(() => {\n    if (!filteredData) return;\n    handleSearch(searchTerm);\n  }, [sortState]);\n\n  // Render Table Element\n  const renderTable = () => {\n    // If the user's search returns no results,\n    if (searchTerm && !filteredData.length) {\n      // Render \"No Results\" message\n      return (\n        <div className=\"col text-center\">\n          <p className=\"lead my-3 text-muted\">\n            No results found for \"{searchTerm}\".\n          </p>\n        </div>\n      );\n    }\n\n    // Else render table with data\n    return (\n      <div className=\"table-responsive-lg \">\n        <table className=\"table table-borderless table-hover\">\n          <TableHead\n            columns={[...props.columns]}\n            handleSort={handleSort}\n            sortColumn={sortState.sortedBy}\n          />\n          <TableBody\n            columns={props.columns}\n            data={handleVisibleData()}\n            searchTerm={searchTerm}\n          />\n        </table>\n      </div>\n    );\n  };\n\n  // Render table name/title if one was provided as a prop\n  const renderTableName = () => {\n    if (props.name) return <h1 className=\"h2 fw-bold\">{props.name}</h1>;\n  };\n\n  // Handle logic to determine the correct dataset to pass to tableBody\n  const handleVisibleData = () => {\n    // If there is no search term, return tableData\n    if (!searchTerm) return tableData;\n\n    // Else, if filteredData is empty (i.e. There were no matching results for the search), return null\n\n    // Else, return fileredData (i.e. Search results)\n    return filteredData;\n  };\n\n  // Search for given term and update the filteredData state object with the resulting matches\n  const handleSearch = (searchTerm) => {\n    // If the search input field is emptied, clear filteredData array\n    if (!searchTerm) {\n      setFilteredData([]);\n      return;\n    }\n\n    // Otherwise search tableData's searchable columns for values that begin with the search term and assign the results to filteredData\n    setFilteredData(\n      searchObjArr(searchTerm, tableData, props.searchableColumns)\n    );\n  };\n\n  // Sort Table Data By Column\n  const handleSort = (columnAccessor) => {\n    // If data is already sorted by the selected property,\n    if (sortState.sorted && sortState.sortedBy === columnAccessor) {\n      // Then the user just wants to change the sort order,\n      // Create a new array which holds a reversed version of the existing sorted data (i.e sorted in descending order)\n      // Update the filtered data state with reversed data array\n      setTableData([...tableData].reverse());\n\n      // Update sortState by inverting the orderDesc property value\n      setSortState({\n        ...sortState,\n        orderDesc: sortState.orderDesc ? false : true,\n      });\n\n      return;\n    }\n\n    // Update The tableData State Object with a sorted version of itself\n    setTableData(sortObjArr([...tableData], { property: columnAccessor }));\n\n    // Updated sortState to reflect that data is currently sorted by chosen element\n    setSortState({ ...sortState, sorted: true, sortedBy: `${columnAccessor}` });\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-between\">\n        <div className=\"col-4\">{renderTableName()}</div>\n        <div className=\"col col-lg-3\">\n          <div className=\"d-flex justify-content-between h-100\">\n            <SearchBar setSearchTerm={setSearchTerm} />\n          </div>\n        </div>\n      </div>\n      <div className=\"row g-0 mt-3 px-5 py-3 mx-auto bg-white\">\n        {renderTable()}\n      </div>\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./components/Header\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  // Initialize employees state\n  const [employeesData, setEmployeesData] = useState([]);\n\n  // Fetch employees data from API on component mount\n  useEffect(() => {\n    API.fetchUsers()\n      .then((res) => {\n        setEmployeesData(res);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const renderTable = () => {\n    return (\n      <Table\n        name=\"Employees\"\n        data={employeesData}\n        columns={[\n          { name: \"First Name\", accessor: \"firstName\" },\n          { name: \"Last Name\", accessor: \"lastName\" },\n          { name: \"Gender\", accessor: \"gender\" },\n          { name: \"Email Address\", accessor: \"email\" },\n          { name: \"State\", accessor: \"state\" },\n          { name: \"City\", accessor: \"city\" },\n        ]}\n        searchableColumns={[\"firstName\", \"lastName\", \"email\", \"state\", \"city\"]}\n        filterableColumns={[\"gender\", \"state\", \"city\"]}\n      />\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <main className=\"py-5 \">\n        <div className=\"container pt-3\">{renderTable()}</div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}